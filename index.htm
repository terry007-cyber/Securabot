<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecuraBot - AI Security Assistant</title>
    <style>
        /* --- Basic Styling for a Professional Look --- */
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: #f4f7f9;
            color: #333;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .chat-container {
            width: 90%;
            max-width: 700px;
            height: 80vh;
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        .chat-header {
            background-color: #2c3e50;
            color: white;
            padding: 16px;
            text-align: center;
            font-weight: bold;
            font-size: 1.2em;
        }
        .chat-box {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            border-bottom: 1px solid #e0e0e0;
        }
        .message {
            margin-bottom: 15px;
            display: flex;
            flex-direction: column;
        }
        .message.user {
            align-items: flex-end;
        }
        .message.bot {
            align-items: flex-start;
        }
        .message-bubble {
            max-width: 80%;
            padding: 10px 15px;
            border-radius: 18px;
            line-height: 1.5;
        }
        .message.user .message-bubble {
            background-color: #3498db;
            color: white;
        }
        .message.bot .message-bubble {
            background-color: #ecf0f1;
            color: #2c3e50;
        }
        .sources-container {
            font-size: 0.8em;
            margin-top: 8px;
            padding-left: 10px;
            color: #7f8c8d;
        }
        .sources-container a {
            color: #2980b9;
            text-decoration: none;
        }
        .chat-input {
            display: flex;
            padding: 15px;
        }
        #userInput {
            flex-grow: 1;
            border: 1px solid #e0e0e0;
            border-radius: 20px;
            padding: 10px 15px;
            font-size: 1em;
            outline: none;
        }
        #sendButton {
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            margin-left: 10px;
            cursor: pointer;
            font-size: 1.5em;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>

    <div class="chat-container">
        <div class="chat-header">SecuraBot Assistant</div>
        <div class="chat-box" id="chatBox">
            <!-- Chat messages will be added here by JavaScript -->
            <div class="message bot">
                <div class="message-bubble">
                    Hello! I am SecuraBot. How can I help you with SQL injection or API security today?
                </div>
            </div>
        </div>
        <div class="chat-input">
            <input type="text" id="userInput" placeholder="Ask a question..." autocomplete="off">
            <button id="sendButton">â†’</button>
        </div>
    </div>

    <script>
        // --- JavaScript Logic to Connect to Your Python API ---

        const chatBox = document.getElementById('chatBox');
        const userInput = document.getElementById('userInput');
        const sendButton = document.getElementById('sendButton');

        // Function to handle sending a message
        async function sendMessage() {
            const question = userInput.value.trim();
            if (question === '') return;

            // Display the user's message immediately
            appendMessage('user', question);
            userInput.value = '';

            // Show a "thinking" loader for the bot
            const loaderId = appendLoader();

            try {
                // This is the core API call to your Python backend
                const response = await fetch('http://127.0.0.1:8888/ask', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ question: question }) // Send the question in JSON format
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json(); // Get the JSON response
                
                // Remove the loader and display the bot's real answer
                removeLoader(loaderId);
                appendMessage('bot', data.answer, data.sources);

            } catch (error) {
                // Handle errors (e.g., if the Python server is not running)
                console.error('Error fetching response:', error);
                removeLoader(loaderId);
                appendMessage('bot', 'Sorry, I am having trouble connecting to my brain. Please ensure the server is running.');
            }
        }

        // Function to add a message to the chat window
        function appendMessage(sender, text, sources = []) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;

            const bubble = document.createElement('div');
            bubble.className = 'message-bubble';
            bubble.innerText = text; // Using innerText prevents XSS here :)
            messageDiv.appendChild(bubble);

            // If there are sources, create and append them
            if (sources.length > 0) {
                const sourcesDiv = document.createElement('div');
                sourcesDiv.className = 'sources-container';
                sourcesDiv.innerHTML = '<strong>Sources:</strong>'; // Use innerHTML to create the strong tag
                sources.forEach(url => {
                    const link = document.createElement('a');
                    link.href = url;
                    link.target = '_blank'; // Open link in a new tab
                    link.innerText = url;
                    sourcesDiv.appendChild(document.createElement('br'));
                    sourcesDiv.appendChild(link);
                });
                messageDiv.appendChild(sourcesDiv);
            }

            chatBox.appendChild(messageDiv);
            chatBox.scrollTop = chatBox.scrollHeight; // Auto-scroll to the latest message
        }

        // Functions to show and hide the loading indicator
        function appendLoader() {
            const loaderId = 'loader-' + Date.now();
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message bot';
            messageDiv.id = loaderId;
            const bubble = document.createElement('div');
            bubble.className = 'message-bubble';
            const loader = document.createElement('div');
            loader.className = 'loader';
            bubble.appendChild(loader);
            messageDiv.appendChild(bubble);
            chatBox.appendChild(messageDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
            return loaderId;
        }

        function removeLoader(loaderId) {
            const loaderElement = document.getElementById(loaderId);
            if (loaderElement) {
                loaderElement.remove();
            }
        }

        // Event Listeners for sending the message
        sendButton.addEventListener('click', sendMessage);
        userInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
</body>
</html>